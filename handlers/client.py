from aiogram import F, types, Router, Bot
from aiogram.filters.command import CommandStart
from keyboard.kb import start_kb, change_kb
from db.db import DB
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import datetime
from config import WEATHER_API
import requests

sched = AsyncIOScheduler()

class ST(StatesGroup):
    locs = State()
    time = State()

router = Router()
WorksDB = DB()


@router.message(CommandStart())
async def start_cmd(message: types.Message, state: FSMContext):
    to_check = WorksDB.user_check(message.from_user.id)
    if to_check:
        await message.answer('–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –•–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?', reply_markup=change_kb())
    else:
        await message.answer('–î–ª—è –ø—Ä–∏–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–π –ø–æ–≥–æ–¥—ã –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è.\
 –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=start_kb())
        await state.set_state(ST.locs)
        
        
@router.message(F.text == '/desc')
async def description_command(message: types.Message):
    await message.answer('–≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ –æ–¥–Ω–æ –∏ —Ç–æ-–∂–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–æ–≥–æ–¥—É.\n\
–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    
    
@router.message(F.location, ST.locs)
async def get_loc(message: types.Message, state: FSMContext):
    lat = message.location.latitude
    lon = message.location.longitude
    await state.update_data(user_id=message.chat.id)
    await state.update_data(lat=lat)
    await state.update_data(lon=lon)
    

    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00', reply_markup=types.reply_keyboard_remove.ReplyKeyboardRemove(remove_keyboard=True))
    await state.set_state(ST.time)
    
    
@router.message(ST.time)
async def time_handler(message: types.Message, state: FSMContext, bot: Bot):
    try:
        time = list(map(int, message.text.split(':'),))
    except Exception:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!')
        return
    await state.update_data(hour=time[0])
    await state.update_data(minute=time[1])
    
    date = await state.get_data()
    sched.add_job(work, trigger='cron', hour=time[0], minute=time[1], args=[bot, date['lon'], date['lat'], date['user_id']])
    WorksDB.user_add(date=date)
    await message.answer(f'–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤–∞—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥—É—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {message.text}')
    await state.clear()
    
    
async def work(bot: Bot, lan, lot, chat_id):
    params = {'key':WEATHER_API, 'q':'56.884321,60.513568', 'alerts':'no', 'lang':'ru'}
    res = requests.get(f'http://api.weatherapi.com/v1/current.json', params=params).json()
    text = f"""
        <em>–ü–æ–≥–æ–¥–∞</em>üå®:
    
{res['current']['condition']['text']}
    
<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b>: {res['current']['temp_c']} ‚ÑÉ
<i>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {res['current']['feelslike_c']}</i> ‚ÑÉ
    """
    await bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')

    
@router.callback_query(F.data == 'change')
async def change_all(callback: types.CallbackQuery):
    WorksDB.delete_user(callback.from_user.id)
    await callback.message.answer('–ú—ã —É–¥–∞–ª–∏–ª–∏ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π\
–ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    await callback.answer()
    
